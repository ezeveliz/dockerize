#!/bin/bash

# Define Docker Compose command prefix...
if [ -x "$(command -v docker-compose)" ]; then
    DOCKER_COMPOSE=(docker-compose)
else
    DOCKER_COMPOSE=(docker compose)
fi


#######################################
# FUNCTIONS
#######################################

# Run an Artisan command
artisan () {
    "${DOCKER_COMPOSE[@]}" run --rm backend php artisan "${@:1}"
}

# Build all of the images or the specified one
build () {
    DOCKER_BUILDKIT=1 "${DOCKER_COMPOSE[@]}" build "${@:1}"
}

# Generate a wildcard certificate
cert_generate() {

  # Elimino certificados anteriores
  sudo rm -Rf .docker/nginx/certs/demo.test.*
  # Creo un certificado auto firmado para *.demo.test
  "${DOCKER_COMPOSE[@]}" run --rm nginx sh -c "cd /etc/nginx/certs && touch openssl.cnf && cat /etc/ssl1.1/openssl.cnf > openssl.cnf && echo \"\" >> openssl.cnf && echo \"[ SAN ]\" >> openssl.cnf && echo \"subjectAltName=DNS.1:demo.test,DNS.2:*.demo.test\" >> openssl.cnf && openssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout demo.test.key -out demo.test.crt -days 3650 -subj \"/CN=*.demo.test\" -config openssl.cnf -extensions SAN && rm openssl.cnf"
}

# Install the certificate
cert_install () {

    # Instalo certificados según el tipo de SO, solo soporta Mac y derivados de Debian, el resto deberá ser instalado manualmente

    if [[ "$OSTYPE" == "darwin"* ]]; then
        sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain .docker/nginx/certs/demo.test.crt
    elif [[ "$OSTYPE" == "linux-gnu" ]]; then

        # Si había un certificado presente, lo elimino
        sudo rm -f /usr/local/share/ca-certificates/demo.test.crt
        # Instalo el certificado creado anteriormente
        sudo ln -s "$(pwd)/.docker/nginx/certs/demo.test.crt" /usr/local/share/ca-certificates/demo.test.crt
        sudo update-ca-certificates
        # Me instalo a mi mismo como autoridad certificante en el navegador para poder utilizar mi certificado autofirmado
        # https://unix.stackexchange.com/a/90607
        certutil -d sql:"$HOME/.pki/nssdb" -A -t "C,," -n "My Homemade CA" -i "$(pwd)/.docker/nginx/certs/demo.test.crt"
    else
        echo "Could not install the certificate on the host machine, please do it manually"
    fi
}

# Run a Composer command
composer () {
    "${DOCKER_COMPOSE[@]}" run --rm backend composer "${@:1}"
}

# Remove the entire Docker environment
destroy () {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    "${DOCKER_COMPOSE[@]}" down -v --rmi all --remove-orphans
}

# Stop and destroy all containers
down () {
    "${DOCKER_COMPOSE[@]}" down "${@:1}"
}

# Create .env from .env.example
env () {
    if [ ! -f .env ]; then
        cp .env.example .env
    fi
}

# Clone or update the repositories
repositories () {
    repos=(arbil)
    cd src || exit
    for repo in "${repos[@]}";
    do
        # Solo clono si no existía
        if [ ! -d "$repo" ]; then
          (git clone "https://github.com/ezeveliz/${repo}.git" "$repo"; cd "$repo" ; git checkout develop ; cd ..) || true
        else
          (cd "$repo" ; git checkout develop ; git fetch ; cd ..) || true
        fi
    done
    cd ..
}

# Initialise the Docker environment and the application
init () {

    # El script init SOLO se ejecuta durante la ejecución de esta función

    repositories \
        && env \
        && down -v \
        && build \
        && "${DOCKER_COMPOSE[@]}" run --rm --entrypoint="//opt/files/init" backend \
        && "${DOCKER_COMPOSE[@]}" run --rm --entrypoint="//opt/files/init" frontend \

    # Si no había certificados generados, los genero
    if [ ! -f .docker/nginx/certs/demo.test.crt ]; then
        cert_generate
    fi

    # Inicio e instalo certificados
    start --dont-print  && cert_install

    printf "\n\nSi el navegador estaba abierto deberá reiniciarlo"

    printf "\n\nA continuación podrá ingresar al sitio desde la siguiente URL: https://backend.demo.test \n\n"
}

# Display and tail the logs of all containers or the specified one's
logs () {
    "${DOCKER_COMPOSE[@]}" logs -f "${@:1}"
}

# Restart the containers
restart () {

    # docker-compose restart solo reinicia los contenedores en ejecución utilizando la misma imagen,
    # pero si hubo cambios en las mismas no los actualiza
    stop && start
}

# Start the containers
start () {
    "${DOCKER_COMPOSE[@]}" up -d

    if [[ "$1" != "--dont-print" ]]; then
        printf "\nA continuación podrá ingresar al sitio desde la siguiente URL: https://backend.demo.test \n\n"
    fi
}

# Stop the containers
stop () {
    "${DOCKER_COMPOSE[@]}" stop
}

# Update the Docker environment
update () {

    repositories \
        && git pull \
        && build --pull\
        && "${DOCKER_COMPOSE[@]}" run --rm --entrypoint="//opt/files/init" backend \
        && artisan migrate \
        && "${DOCKER_COMPOSE[@]}" run --rm --entrypoint="//opt/files/init" frontend \
        && restart
}

# Run a npm command
npm () {
    "${DOCKER_COMPOSE[@]}" run --rm frontend npm "${@:1}"
}

# Imprimo lineas a agregar al archivo ~./bashrc
install_script () {

    path=$(pwd)

    inicio='function demo {
      cd '
    fin=' && bash demo $*
      cd -
      }'

    printf "Copia las lineas que aparecen a continuación y agregalas al final del archivo ~/.bashrc para que demo esté disponible desde cualquier lugar\n\n"

    echo 'export HOST_UID=$(id -u)'
    echo "$inicio$path$fin"

    printf "\nAhora guarda los cambios, cerra el archivo ~/.bashrc y la terminal, luego volvé a abrirla y ejecutá \"demo init\" para continuar \n\n"
}

#######################################
# MENU
#######################################

case "$1" in
    artisan)
        artisan "${@:2}"
        ;;
    build)
        build "${@:2}"
        ;;
    cert)
        case "$2" in
            generate)
                cert_generate
                ;;
            install)
                cert_install
                ;;
            *)
                cat << EOF

Certificate management commands.

Usage:
    demo cert <command>

Available commands:
    generate .................................. Generate a new certificate
    install ................................... Install the certificate

EOF
                ;;
        esac
        ;;
    composer)
        composer "${@:2}"
        ;;
    destroy)
        destroy
        ;;
    down)
        down "${@:2}"
        ;;
    init)
        init
        ;;
    logs)
        logs "${@:2}"
        ;;
    restart)
        restart
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    update)
        update
        ;;
    npm)
        npm "${@:2}"
        ;;
    install-script)
        install_script
        ;;
    *)
        cat << EOF
Command line interface for the Docker-based web development environment demo.
Usage:
    demo <command> [options] [arguments]
Available commands:
    artisan ................................... Run an Artisan command
    build [image] ............................. Build all of the images or the specified one
    cert ...................................... Certificate management commands
            generate .............................. Generate a new certificate
            install ............................... Install the certificate
    composer .................................. Run a Composer command
    destroy ................................... Remove the entire Docker environment
    down [-v] ................................. Stop and destroy all containers
                                                Options:
                                                    -v .................... Destroy the volumes as well
    init ...................................... Initialise the Docker environment and the application
    logs [container] .......................... Display and tail the logs of all containers or the specified one's
    restart ................................... Restart the containers
    start ..................................... Start the containers
    stop ...................................... Stop the containers
    update .................................... Update the Docker environment
    npm ....................................... Run a npm command
    install-script ............................ Print commands to install demo script
EOF
        exit
        ;;
esac