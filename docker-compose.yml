version: '3.8'

# Servicios
services:

  nginx:
    build: ./.docker/nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./src/${BACKEND_REPO}:/var/www/backend"
      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
      - ./.docker/nginx/certs:/etc/nginx/certs
    depends_on:
      - backend

  backend:
    build:
      context: "./src/${BACKEND_REPO}"
      args:
        HOST_UID: $HOST_UID
    working_dir: /var/www/backend
    volumes:
      - "./src/${BACKEND_REPO}:/var/www/backend"
      - ./.docker/backend/init:/opt/files/init
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    build:
      context: "./src/${BACKEND_REPO}/.dck.frontend"
      args:
        HOST_UID: $HOST_UID
    working_dir: /var/www/backend
    volumes:
      - "./src/${BACKEND_REPO}:/var/www/backend"
      - ./.docker/frontend/init:/opt/files/init

  postgres:
    build:
      context: "./src/${BACKEND_REPO}/.dck.db"
    working_dir: /var/www/backend
    restart: unless-stopped
    ports:
      - 5433:5432
    environment:
      POSTGRES_PASSWORD: 2522
      POSTGRES_DB: dummy-db
      POSTGRES_USER: arbil
    volumes:
      - pgsqldata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U arbil" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

volumes:
  pgsqldata:
  redisdata: